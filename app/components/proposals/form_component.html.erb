<%= translatable_form_for(proposal, url: url, html: { class: "proposal-form" }) do |f| %>
  <%= render "shared/errors", resource: proposal %>

  <fieldset class="required-fields">
    <legend><%= t("shared.required") %></legend>

    <%= render "shared/globalize_locales", resource: proposal %>

    <%= f.translatable_fields do |translations_form| %>
      <div>
        <%= translations_form.text_field :title,
                                         maxlength: Proposal.title_max_length,
                                         data: suggest_data(proposal) %>
      </div>
      <div class="js-suggest" data-locale="<%= translations_form.locale %>"></div>

      <div>
        <%= translations_form.text_area :summary,
                                        rows: 4, maxlength: 200,
                                        hint: t("proposals.form.proposal_summary_note") %>
      </div>

      <div>
        <%= translations_form.text_area :description,
                                        maxlength: Proposal.description_max_length,
                                        class: "html-area" %>
      </div>
    <% end %>
  </fieldset>

  <%= f.invisible_captcha :subtitle %>

  <fieldset>
    <% if feature?(:allow_images) %>
      <%= render Images::NestedComponent.new(f) %>
    <% end %>

    <% if feature?(:allow_attached_documents) %>
      <%= render Documents::NestedComponent.new(f) %>
    <% end %>

    <% if Geozone.any? %>
      <div>
        <%= f.select :geozone_id, geozone_select_options,
                     include_blank: t("geozones.none") %>
      </div>
    <% end %>

    <% if feature?(:map) %>
      <div>
        <%= render "map_locations/form_fields",
                   form: f,
                   map_location: proposal.map_location || MapLocation.new,
                   label: t("proposals.form.map_location"),
                   help: t("proposals.form.map_location_instructions"),
                   i18n_namespace: "proposals" %>
      </div>
    <% end %>

    <div>
      <%= f.label :tag_list, t("proposals.form.tags_label") %>
      <p class="help-text" id="tag-list-help-text"><%= t("proposals.form.tags_instructions") %></p>

      <div id="category_tags" class="tags">
        <%= f.label :category_tag_list, t("proposals.form.tag_category_label") %>
        <%
          def simple_hash(input)
            hash = 0
            input.each_char.with_index do |char, index|
              hash = (hash + (char.ord * (index + 1))) % 10000000000
            end
            hash.to_s.rjust(10, '0')  # Ensure 10 characters by padding with zeros
          end
        %>
        <% categories.each do |tag| %>
          <a id="<%= simple_hash(tag.name) %>" class="js-add-tag-link" style="width:100%;text-align:center"><%= tag.name %></a>
        <% end %>
      </div>

      <br>
      <%= f.text_field :tag_list, value: proposal.tag_list.to_s,
                                  label: false,
                                  placeholder: t("proposals.form.tags_placeholder"),
                                  class: "js-tag-list tag-autocomplete",
                                  style: "display: none",
                                  aria: { describedby: "tag-list-help-text" },
                                  data: { js_url: suggest_tags_path } %>
    </div>

    <script>
      function simpleHash(input) {
        let hash = 0;
        for (let i = 0; i < input.length; i++) {
          hash = (hash + input.charCodeAt(i) * (i + 1)) % 10000000000;
        }
        return hash.toString().padStart(10, '0');  // Ensure 10 characters by padding with zeros
      };
      function updateButtons() {
        $(".js-add-tag-link").each(function() {
          $(this).css('background-color', '#ececec');
          $(this).css('color', 'black');
        });
        const inputTags = document.getElementById('proposal_tag_list');
        var content = inputTags.value;
        console.log("input content: ", content);
        let cats = content.replace(/"/g, '').split(';');
        console.log("cats marcados: ", cats);
        cats.forEach(cat => {
            console.log("hash inputs: ", simpleHash(cat));
            let element = document.getElementById(simpleHash(cat));
            if (element) {
                element.style.backgroundColor = 'rgb(33.0436046512, 134.6220930233, 177.4563953488)';
                element.style.color = 'white';

            }
        });
      };
      $(document).ready(function() {
        $(".js-add-tag-link").on("click", function(e) {
          e.target.style.backgroundColor = "#ececec";
          setTimeout(function() {
            const input = document.getElementById('proposal_tag_list');
            const ev = new Event('input');
            input.dispatchEvent(ev);
          }, 100);
        });
        updateButtons();
      });
      document.getElementById('proposal_tag_list').addEventListener('input', function(e) {
        updateButtons();
      });
    </script>

    <% if current_user.unverified? %>
      <div>
        <%= f.text_field :responsible_name,
                         hint: t("proposals.form.proposal_responsible_name_note") %>
      </div>
    <% end %>

    <%= render SDG::RelatedListSelectorComponent.new(f) %>
  </fieldset>

  <div class="actions">
    <% if proposal.new_record? %>
      <div>
        <%= render Shared::AgreeWithTermsOfServiceFieldComponent.new(f) %>
      </div>
    <% end %>

    <%= f.submit(class: "button", value: t("proposals.#{action_name}.form.submit_button")) %>
  </div>
<% end %>
